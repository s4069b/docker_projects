Getmail is a small Python script to retrieve emails from IMAP accounts (e.g. gmx.de, gmail.com) and deliver these emails to the Mailcow/Dovecot mailbox. 
Emails are retrieved using IMAP IDLE, so emails are retrieved immediately and not after a fixed interval (as with imapsync from Mailcow).
The transfer to Mailcow is done via LMTP interface (simplified SNMP) from Dovecot, so you can also use the sieve rules from Dovecoat (imapsync from Mailcow only allows a fixed folder). 

Install:
- Copy the getmail folder from github to your server. Preferably on the same level as the mailcow-dockerized folder.
   e.g. /data/docker_projects/getmail, /data/docker_projects/mailcow-dockerized
- Copy the docker-compose.override.yml file to the mailcow-dockerized folder 
   cli# cp /data/docker_projects/getmail/mailcow-dockerized_docker-compose.override.yml /data/docker_projects/mailcow-dockerized/docker-compose.override.yml
- Because the docker network "network-getmail" is used independently in mailcow and getmail, the network "network-getmail" must be created externally (i.e. not in the docker-compose.yml).
  Any other IP range can be used, it should only not be already in use (test: ip -6 route show, ip route show). 
   cli# docker network create --driver=bridge --ipv6 --subnet=fdcb:9c90:23:11::/64 --gateway=fdcb:9c90:23:11::1 --subnet=172.23.11.0/24 --gateway=172.23.11.1 -o "com.docker.network.bridge.name"="br-getmail" network-getmail
- Config file must be customized
   cli# cp /data/docker_projects/getmail/conf/settings.ini.example  /data/docker_projects/getmail/conf/settings.ini
   cli# vi /data/docker_projects/getmail/settings.ini
- Now start mailcow and getmail. 
   cli# cd /data/docker_projects/mailcow-dockerized/
   cli# docker-compose up -d
   cli# cd /data/docker_projects/getmail/
   cli# docker-compose up -d
 - Now check the logs from getmail 
   cli#  docker-compose logs
    
    Output: 2021-02-08 20:28:41,734 - MainThread - INFO: use config file: ./settings.ini
    
   
   
   
Config:
Everything under [DEFAULT] applies to all IMAP accounts. Mostly only imap_hostname:, imap_username:, imap_password: have to be customized. 
In the source IMAP account only one folder is monitored (default = imap_sync_folder: INBOX), if the junk folder should be monitored as well, two accounts must be created. 

[INBOX_test_gmx.de]
imap_hostname:     imap.gmx.net
imap_username:     test@gmx.de
imap_password:     xxx
# INFO: "imap_sync_folder: INBOX" is default

[JUNK_test_gmx.de]
imap_hostname:     imap.gmx.net
imap_username:     test@gmx.de
imap_password:     xxx
imap_sync_folder:  Junk
   
Normally retrieved emails are deleted from the source IMAP account (imap_move_enable: False), the goal of the script is to completely empty the monitored folder (e.g. INBOX). It is also possible to move the emails to a folder in the source IMAP account.

imap_move_enable: True
imap_move_folder: getmail

With lmtp_recipient: you specify the destination imap account in mailcow. 



Sieve filter:
In every retrieved email, a header (X-getmail-retrieved-from-mailbox-user) is added, with this information you can filter with sieve (Mailcow: Mail Setup -> Filters -> Add Filter)

-----------
require "fileinto";
require "regex";
require "body";

...
if header :contains ["X-getmail-retrieved-from-mailbox-user"] ["xxxtestxxx@gmx.de", "xxxtest2xxxx@gmx.de"]
{
    fileinto "INBOX/Getmail_GMX";
}
elsif header :contains ["X-getmail-retrieved-from-mailbox-user"] ["xxxtestxxx@outlook.de", "xxxtest2xxxx@outlook.de"]
{
    fileinto "INBOX/Getmail_Outlook";
}
else
{
  # The rest goes into INBOX
  # default is "implicit keep", we do it explicitly here
  keep;
}
-----------

